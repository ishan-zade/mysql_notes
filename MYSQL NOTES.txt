SELECT USER(); --> through which login connected	

SELECT DATABASE(); --> through which database connected currently
 
USE MYDB0; ---> to connect database
 
SHOW TABLES; --> shows available tables 

SQL COMMANDS PART1 (DQL)
-------------------------
* ---> display all columns 

SELECT * FROM table_name; ---> to print tables

DESC table_name  ---> structure of tables (column names and other details)

SELECT COLUMN1, COLUMN2 FROM TABLE_NAME;

SELECT * FROM TABLE_NAME WHERE 4 > 90 ---> not error no records shown cause condition is false

SELECT * FROM EMP WHERE ENAME <> 'SMITH'; ---> display table except smith
            OR
SELECT * FROM EMP WHERE ENAME != 'SMITH'; 

LOGICAL AND OR OPERATORS
-----------------------

SELECT * FROM TABLE_NAME 
WHERE JOB = 'CLERK' AND SAL < 1000;

SELECT * FROM TABLE_NAME 
WHERE JOB = 'CLERK' OR SAL < 1000;

SELECT * FROM EMP 
WHERE (JOB = 'MANAGER' OR JOB = 'CLERK') AND SAL<1000; --> Parenthisis has more priority while running query

SQL SPECIAL OPERATORS
---------------------

1)BETWEEN : it works with range of values

 SELECT * FROM EMP WHERE SAL BETWEEN 1250 AND 3000; ---->both values are inclusive
 
 SELECT * FROM EMP WHERE ENAME BETWEEN 'ADAMS' AND 'SMITH'; --->range between first later of condition
 SELECT * FROM EMP WHERE SAL NOT BETWEEN 1250 AND 3000;
 SELECT * FROM EMP WHERE ENAME NOT BETWEEN 'ADAMS' AND 'SMITH';
 
 2) IN : useful for equating multiple values of a single column it acts as logical or operator'
 
  SELECT * FROM EMP WHERE JOB IN ('CLERK','MANAGER');  ---> in convert query into or
  SELECT * FROM EMP WHERE JOB NOT IN ('CLERK','MANAGER'); 
  SELECT * FROM EMP WHERE JOB NOT IN ('CLERK','MANAGER',NULL); ---> in means it convert query into and
  SELECT * FROM EMP WHERE SAL NOT IN (1250,9999); ---> everything will print except salary 1250 and 9999.
  
 3) IS NULL : to see the null value records or missing or blank value records

   SELECT * FROM EMP WHERE COMM IS NULL;
   
4) LIKE : it is a pattern matching operator. it will not search for an "exact value".
          #there are two wild cards associated with LIKE operator.
		    a) % -> it will replace any character and any number of characters.
                    it replaces zero or one or multiple characters.		

                     SELECT * FROM EMP WHERE ENAME LIKE 'S%';	
					 
			b)_  ->  a single underscore replaces single character. so to replace
			         certain number of
					 
					 SELECT * FROM PCODES WHERE CODE LIKE '__01';
					 
					 
5)	ESACPE:
		SELECT * FROM PCODES WHERE CODE LIKE 'A?%C01' ESCAPE '?';
		SELECT * FROM PCODES WHERE CODE NOT LIKE 'A?%C01' ESCAPE '?';
	
6)
     COLUMN ALIASES ---> only in the output of select statement the column will have a different cutomized 
							heading
	 SELECT ENAME, SAL AS SALARY FROM EMP; ---> As is optional keyword
	 SELECT ENAME 'NAME OF EMPLOYEE' ,SAL SALARY FROM EMP;
					 
ORDER BY CLAUSE:
----------------
	 SELECT * FROM EMP ORDER BY ENAME DESC; ---> Asc -ascending
	 PRECEDENCE RULE ---> NULL ,NEGATIVE VALUE , 0 , POSITIVE 
     
	 #first position in query having first priority in ORDERBY clause.
      SELECT ENAME,SAL,DEPTNO FROM EMP ORDER BY 2;
	  
	  
CREATING TABLES:
-----------------

1] Creating table wihtout Data Integrity Rules (constraints)

    CREATE TABLE Cust_Master0 (CustID int,CustName Varchar(20),CustCity Varchar(10));	  
	 //char max length is 255 
	 //varchar max length is 16383
    
2] Inserting records in the table

    INSERT INTO Cust_Master0 VALUES(1,'JOHN','PUNE');
    
     
3] Creating table with Data Integrity Rules (constraints)

    Constraints are declared at 2 lvl
	a) column lvl
	b) table lvl
	
	
	a) column lvl:
	 CREATE TABLE Cust_Master(CustID int Primary Key,
	 CustName Varchar(20) Not Null,
	 CustCity Varchar(10) default 'Pune', 
	 Deposit int Check(Deposit >= 500),
	 Credit_Card_No int Unique
	 );

	Create Table Cust_Transactions (CustID Int References Cust_Master,Amount Int );

	// without inserting record in parent if we insert record in child table in other database,its show error 
    Insert into Cust_Transactions Values (1,200);

	// check constraints error
	Insert into Cust_Master values ( 1, 'John' , default,400 ,Null);
    
	
	b)Table lvl: 
		create table t1
		(a int,
		 b int not null,
		 c int ,
		 Primary key (a),
		 Unique (c),
		 Check (d > 100)
		 );
		 
`	Need of Table Level constraints:
		1) When we comparing columns of the  tables 
		2) while creating Composite keys
		
		// eg:1 When we comparing columns of the  tables 
		//error 
		create table t1(
		a int,
		b int,
		c int check (c > b)
		);
		
		
		
		create table t1(
		a int,
		b int,
		c int ,
		check (c > b)
		);
		
		//eg2: while creating Composite keys
		create table t2 (
		a int,
		b int,
		c int,
		Primary Key(a,b)
		);
		
		
		
Foreign Key at table lvl:
		Create Table Cust_Transactions (CustID Int ,
		Amount Int,
		Foreign Key (CustID) References Cust_Master(CustID)

		);
		
		
#Expression columns or derived columns in selected  statement:

    SELECT ENAME , SAL,SAL*12 'ANNUAL SALARY' FROM EMP;
	
	
Functions in SQL:
------------------

     types of sql functions as per their creation:
	 1] built-in (either ANSI or Proprietory)
	 2] user defined (programmatically in that database)
	 
	 types of sql functions as per their creation:
	 
	 1] Single row (or scalar):-  they will return a single value for every row returned by select statement or by the query.
	    
		types of single row functions as per their return value:
		a) String or text functions
		b) numeric functions
		c) Null Handling functions
		d) Conditional functions
		e) Date functions
		f) type casting functions
		
	 
	 
	 if in expression their is a null ,then sql returns null as a answer.
		
		In mySql there is a function known as ifNull
		IfNull(Column Name or expression , value or expression if the first parameter is null)
		
		
Conditional Functions:
		
		case is an ANSI SQL conditional function.
		
		1) case acting as switch case where it checks the exact value.
		
		Examples:
		
		case acting as switch case where it checks the exact value.
		
		Syntax: SELECT CASE COLUMN NAME OR EXPRESSION
		                                         WHEN VALUE1 THEN STATEMENT1
		                                         WHEN VALUE2 THEN STATEMENT2
												 WHEN VALUE3 THEN STATEMENT3
												 ----------| |--------------
												 [ELSE
												           STATEMENTn
												 ]		
                END												 
	 
	 
	     2) case acting as if..else if... where it checks the boolean value.
		 
		 SELECT ENAME,SAL,CASE
		                       WHEN SAL>= 4000 THEN 'A+'
	                            WHEN SAL>= 2990 THEN 'A'
								 WHEN SAL>= 2400 THEN 'B+'
								  WHEN SAL>= 1800 THEN 'B'
							    ELSE
								'C'
							END AS 'SALARY CLASS'
        FROM EMP;


        SELECT ENAME,SAL,CASE
                        WHEN SAL BETWEEN 3000 AND 6000 THEN 'A'
                        WHEN SAL BETWEEN 800 AND 1500 THEN 'B'
                        WHEN SAL BETWEEN 1501 AND 2999 THEN 'C'
                        END AS 'SALARY CLASS'
        FROM EMP;		
	 
	 
Summary Queries:
------------------
	 
     Distinct clause -- to eliminates duplicates

     SELECT DISTINCT JOB,ENAME,SAL FROM EMP;
	 
	 
2] Multi row fuctions (or aggregate functions or group functions)	:
---------------------------------------------------------------------

	they will return single value for a group fo values.
	if a grouping is not there then the entire table or filtered table can be group.
	
	SELECT SUM(SAL) FROM EMP;
	SELECT SUM(SAL) FROM EMP WHERE DEPTNO=20;
	
	SELECT SUM(COMM) FROM EMP;
       +-----------+
       | sum(comm) |
       +-----------+
       |      2200 |
       +-----------+

    SELECT SUM(COMM) FROM EMP WHERE COMM IS NULL;
       +-----------+
       | sum(comm) |
       +-----------+
       |      NULL |
       +-----------+
	   
	   
	   [Other Database cannot handle String and integer sum average function]
	 
	  SELECT MAX(ENAME) FROM EMP;  //print on basis of ascii value 
	  
------------------------------------------------------------------------------------
Group By Clause:
----------------
Group by extension of Distinct clause.
 --group by eliminates the duplicates of column specified like Distinct
 *But the value add is that group by can do aggregation in each distinct value returned.
 
 Display deptno wise total salaries.
 
    Rules of Summary queries:
	-------------------------
	1] All non aggregate column of select statement must come in group by clause.
	
	2] the non agrregate column should not have unique values.
	
	Filtering Summarized rows: 
	-------------------------
	
	when we need the filter aggregate values then we should use having clause.
	
	 SELECT DEPTNO,SUM(SAL) FROM EMP GROUP BY DEPTNO HAVING SUM(SAL)>=10000;
	 
	 
	Aggregation on table having no rows:
	------------------------------------

    1]count can never return null,it gives only positive value
	
	SELECT SUM(A),AVG(A),MAX(A),MIN(A),COUNT(A) FROM AGR1;
+--------+--------+--------+--------+----------+
| sum(a) | avg(a) | max(a) | min(a) | count(a) |
+--------+--------+--------+--------+----------+
|   NULL |   NULL |   NULL |   NULL |        0 |
+--------+--------+--------+--------+----------+
	 
	#Using where as well as having clause in same select statement. 
	 
	 Internal execution Sequence of select statement (ansi sql)
	 
	 1.from
	 2.where
	 3.group by
	 4.having
	 5.select column list
	 6.order by
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 